options:
  logging: CLOUD_LOGGING_ONLY
 
steps:
  # Paso 0: Construir la imagen Docker desde el Dockerfile
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY_NAME/$_IMAGE_NAME:latest', '.']
 
  # Paso 1: Verificar si el repositorio de Artifact Registry existe y crearlo si no
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'sh' # Este paso usa la shell para comandos gcloud/bash
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe $_REPOSITORY_NAME --location=$_REGION --format='value(name)'; then
          echo "El repositorio $_REPOSITORY_NAME no existe. Creando repositorio..."
          gcloud artifacts repositories create $_REPOSITORY_NAME --repository-format=docker --location=$_REGION
          echo "Repositorio $_REPOSITORY_NAME creado."
        else
          echo "El repositorio $_REPOSITORY_NAME ya existe."
        fi
 
  # Paso 2: Subir la imagen a Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY_NAME/$_IMAGE_NAME:latest']
 
  # Paso 3: Desplegar la imagen en Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud' # Este paso usa el comando gcloud directamente
    args:
      - 'run'
      - 'deploy'
      - '$_CLOUD_RUN_SERVICE'
      - '--image=$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY_NAME/$_IMAGE_NAME:latest'
      - '--region=$_REGION'
      - '--platform=managed'
      - '--memory=2Gi'
      - '--no-allow-unauthenticated'
      - '--ingress=internal'
      # NOTA IMPORTANTE: Si el servicio Cloud Run es interno y sin autenticación (como aquí),
      # la sección de "add-iam-policy-binding" con 'allUsers' ya no es necesaria ni tiene sentido,
      # ya que el servicio solo será accesible desde la VPC.
      # Se han eliminado los comentarios anteriores para mantener el YAML más limpio.
 
  # Este es el paso clave para invocar el pipeline de Vertex AI DIRECTAMENTE desde Cloud Build
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'python3' # CAMBIO CRÍTICO: Ejecutar directamente con el intérprete de Python 3
    args:
      - '-c'
      - |
        # Las configuraciones de proyecto y región para gcloud CLI
        # son establecidas automáticamente por Cloud Build en este entorno.
        # Por lo tanto, las siguientes líneas NO SON NECESARIAS aquí
        # y causaban el error de sintaxis en Python.
        # gcloud config set project $PROJECT_ID # ELIMINADO
        # gcloud config set compute/region $_REGION # ELIMINADO
 
        # Tampoco es necesario 'pip install -r requirements.txt' aquí,
        # ya que las dependencias de los componentes del pipeline de Vertex AI
        # se instalan dentro de las imágenes de Docker de esos componentes (tu BASE_IMAGE).
        # Este paso solo necesita el ambiente de Python para ejecutar las funciones.
        # Ejecutar el script Python que compila y lanza el pipeline de Vertex AI
        # Asegúrate de que tus archivos 'config.json', 'pipeline/train_pipeline.py'
        # y 'pipeline/prod_modules' estén disponibles en el directorio de trabajo de Cloud Build.
        from pipeline.train_pipeline import compile_pipeline, run_pipeline
        compile_pipeline()
        run_pipeline()
 
substitutions:
  _PROJECT_ID: 'bdb-gcp-qa-cds-idt'
  _REGION: 'us-east4'
  _REPOSITORY_NAME: 'repo-mle-template'
  _IMAGE_NAME: 'mle-template'
  _CLOUD_RUN_SERVICE: 'mle-template-service'